test-pr
name: CodeAssist Review
name: CodeAssist Review
main

on:
  pull_request:
    types: [opened, synchronize, reopened]

test-pr
permissions:
  contents: read
  pull-requests: write

 main
jobs:
  review:
    runs-on: ubuntu-latest

    steps:
 test-pr
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Checkout (full history for diff)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
 test-pr
          pip install flake8 bandit radon unidiff

      - name: Analyze changed Python files
        id: analyze
        shell: bash
        run: |
          set -e

          # Figure out base and head for this PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.sha }}"

          # List changed Python files in the PR
          git fetch --no-tags --depth=1 origin "${BASE_SHA}"
          CHANGED=$(git diff --name-only "${BASE_SHA}" "${HEAD_SHA}" | grep -E '\.py$' || true)

          REPORT="### CodeAssist Review"
          if [ -z "$CHANGED" ]; then
            REPORT="$REPORT\n\nNo Python changes found in this PR."
          else
            for f in $CHANGED; do
              if [ ! -f "$f" ]; then
                # File deleted or moved; skip
                continue
              fi

              REPORT="$REPORT\n\n**$f**"

              # --- Flake8 ---
              F8=$(flake8 --format="%(path)s:%(row)d:%(col)d %(code)s %(text)s" "$f" || true)
              if [ -n "$F8" ]; then
                REPORT="$REPORT\n\n**flake8**\n\`\`\`\n$F8\n\`\`\`"
              else
                REPORT="$REPORT\n\n**flake8**\n\`\`\`\nNo issues.\n\`\`\`"
              fi

              # --- Bandit ---
              BJSON=$(bandit -q -f json "$f" || true)
              if [ -n "$BJSON" ]; then
                BMSG=$(python - <<'PY' <<< "$BJSON"
import json, sys
data=json.loads(sys.stdin.read() or "{}")
out=[]
for r in data.get("results", []):
    out.append(f"{r.get('filename')}:{r.get('line_number')} {r.get('test_id')} {r.get('issue_text')}")
print("\n".join(out))
PY
)
                if [ -n "$BMSG" ]; then
                  REPORT="$REPORT\n\n**bandit**\n\`\`\`\n$BMSG\n\`\`\`"
                else
                  REPORT="$REPORT\n\n**bandit**\n\`\`\`\nNo issues.\n\`\`\`"
                fi
              else
                REPORT="$REPORT\n\n**bandit**\n\`\`\`\nNo issues.\n\`\`\`"
              fi

              # --- Radon Complexity ---
              RMSG=$(python - <<'PY'
import sys
from radon.complexity import cc_visit
from radon.visitors import Function
path = sys.argv[1]
try:
    with open(path, 'r', encoding='utf-8', errors='ignore') as fh:
        code = fh.read()
    blocks = cc_visit(code)
    # Show functions over a threshold (e.g., CC >= 8)
    lines=[]
    for b in blocks:
        # Only print functions/methods
        if hasattr(b, "name") and hasattr(b, "complexity"):
            if b.complexity >= 8:
                lines.append(f"{path}:{getattr(b, 'lineno', 1)} CC={b.complexity} {b.name}")
    print("\n".join(lines))
except Exception as e:
    print(f"radon error: {e}")
PY
"$f")
              if [ -n "$RMSG" ]; then
                REPORT="$REPORT\n\n**radon (CC ≥ 8)**\n\`\`\`\n$RMSG\n\`\`\`"
              else
                REPORT="$REPORT\n\n**radon (CC ≥ 8)**\n\`\`\`\nNo functions over threshold.\n\`\`\`"
              fi

            done
          fi

          # Escape for GitHub output
          REPORT_ESCAPED="${REPORT//'%'/'%25'}"
          REPORT_ESCAPED="${REPORT_ESCAPED//$'\n'/'%0A'}"
          REPORT_ESCAPED="${REPORT_ESCAPED//$'\r'/'%0D'}"
          echo "report=$REPORT_ESCAPED" >> $GITHUB_OUTPUT

      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const body = `${{ steps.analyze.outputs.report }}` || "CodeAssist ran, but no report was generated."

          pip install "flake8==7.1.1" "pycodestyle==2.12.1" "pyflakes==3.2.0" "mccabe==0.7.0"
          pip install bandit radon unidiff

      - name: Determine changed Python files
        id: changes
        shell: bash
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.sha }}"
          CHANGED=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | grep -E '\.py$' || true)
          echo "files=$(echo "$CHANGED" | tr '\n' ',' | sed 's/,$//')" >> "$GITHUB_OUTPUT"

      - name: Analyze files
        if: steps.changes.outputs.files != ''
        id: analyze
        shell: bash
        run: |
          REPORT="### CodeAssist Review"
          IFS=',' read -ra FILES <<< "${{ steps.changes.outputs.files }}"
          for f in "${FILES[@]}"; do
            [ -f "$f" ] || continue
            REPORT="$REPORT\n\n**$f**"

            # flake8
            F8=$(flake8 --format="%(path)s:%(row)d:%(col)d %(code)s %(text)s" "$f" || true)
            if [ -n "$F8" ]; then
              REPORT="$REPORT\n\n**flake8**\n\`\`\`\n$F8\n\`\`\`"
            else
              REPORT="$REPORT\n\n**flake8**\n\`\`\`\nNo issues.\n\`\`\`"
            fi

            # bandit
            BJSON=$(bandit -q -f json "$f" || true)
            BMSG=$(python - <<'PY' <<< "$BJSON"
import json, sys
data=json.loads(sys.stdin.read() or "{}")
for r in data.get("results", []):
    print(f"{r.get('filename')}:{r.get('line_number')} {r.get('test_id')} {r.get('issue_text')}")
PY
)
            if [ -n "$BMSG" ]; then
              REPORT="$REPORT\n\n**bandit**\n\`\`\`\n$BMSG\n\`\`\`"
            else
              REPORT="$REPORT\n\n**bandit**\n\`\`\`\nNo issues.\n\`\`\`"
            fi

            # radon (complexity CC ≥ 8)
            RMSG=$(python - "$f" <<'PY'
import sys
from radon.complexity import cc_visit
path = sys.argv[1]
with open(path, "r", encoding="utf-8", errors="ignore") as fh:
    code = fh.read()
lines=[]
for b in cc_visit(code):
    if getattr(b, "complexity", 0) >= 8:
        lines.append(f"{path}:{getattr(b, 'lineno', 1)} CC={b.complexity} {getattr(b, 'name', '<block>')}")
print("\n".join(lines))
PY
)
            if [ -n "$RMSG" ]; then
              REPORT="$REPORT\n\n**radon (CC ≥ 8)**\n\`\`\`\n$RMSG\n\`\`\`"
            else
              REPORT="$REPORT\n\n**radon (CC ≥ 8)**\n\`\`\`\nNo functions over threshold.\n\`\`\`"
            fi
          done

          REPORT_ESCAPED="${REPORT//'%'/'%25'}"
          REPORT_ESCAPED="${REPORT_ESCAPED//$'\n'/'%0A'}"
          REPORT_ESCAPED="${REPORT_ESCAPED//$'\r'/'%0D'}"
          echo "report=$REPORT_ESCAPED" >> "$GITHUB_OUTPUT"

      - name: Post PR comment
        if: steps.changes.outputs.files != ''
        uses: actions/github-script@v7
        with:
          script: |
            const body = `${{ steps.analyze.outputs.report }}` || "No Python changes found."
main
            if (!context.payload.pull_request) return;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
test-pr
            });

            })

      - name: No Python changes
        if: steps.changes.outputs.files == ''
        run: echo "No Python changes found in this PR."
 main

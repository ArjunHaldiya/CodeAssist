name: CodeAssist Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history for diff)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "flake8==7.1.1" "pycodestyle==2.12.1" "pyflakes==3.2.0" "mccabe==0.7.0"
          pip install bandit radon

      # Get the list of changed files safely (no fragile bash/quotes)
      - name: Get changed files
        id: changes
        uses: tj-actions/changed-files@v45
        with:
          json: true
          files: |
            **/*.py

      - name: Analyze Python changes
        id: analyze
        if: steps.changes.outputs.any_changed == 'true'
        env:
          FILES_JSON: ${{ steps.changes.outputs.all_changed_files_json }}
        run: |
          python - <<'PY'
          import json, os, subprocess, shlex, sys, textwrap

          files = json.loads(os.environ.get("FILES_JSON","[]"))
          files = [f for f in files if f.endswith(".py")]

          report = ["### CodeAssist Review"]
          if not files:
              report.append("No Python changes found in this PR.")
          else:
              for f in files:
                  if not os.path.isfile(f):
                      continue
                  report.append(f"\n**{f}**")

                  # --- flake8 ---
                  try:
                      cmd = f'flake8 --format="%(path)s:%(row)d:%(col)d %(code)s %(text)s" {shlex.quote(f)}'
                      out = subprocess.run(cmd, shell=True, capture_output=True, text=True).stdout.strip()
                      report.append("\n**flake8**\n```\n" + (out or "No issues.") + "\n```")
                  except Exception as e:
                      report.append(f"\n**flake8**\n```\nerror: {e}\n```")

                  # --- bandit ---
                  try:
                      cmd = f'bandit -q -f json {shlex.quote(f)}'
                      res = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                      msgs = []
                      if res.stdout.strip():
                          data = json.loads(res.stdout)
                          for r in data.get("results", []):
                              msgs.append(f"{r.get('filename')}:{r.get('line_number')} {r.get('test_id')} {r.get('issue_text')}")
                      report.append("\n**bandit**\n```\n" + ("\n".join(msgs) or "No issues.") + "\n```")
                  except Exception as e:
                      report.append(f"\n**bandit**\n```\nerror: {e}\n```")

                  # --- radon (CC ≥ 8) ---
                  try:
                      from radon.complexity import cc_visit
                      with open(f, "r", encoding="utf-8", errors="ignore") as fh:
                          code = fh.read()
                      lines=[]
                      for b in cc_visit(code):
                          cc = getattr(b, "complexity", 0)
                          if cc >= 8:
                              name = getattr(b, "name", "<block>")
                              lineno = getattr(b, "lineno", 1)
                              lines.append(f"{f}:{lineno} CC={cc} {name}")
                      report.append("\n**radon (CC ≥ 8)**\n```\n" + ("\n".join(lines) or "No functions over threshold.") + "\n```")
                  except Exception as e:
                      report.append(f"\n**radon**\n```\nerror: {e}\n```")

          final = "\n".join(report)

          # Write a multiline output safely for GitHub
          print(final)
          with open("report.md", "w", encoding="utf-8") as fh:
              fh.write(final)
          print("report<<EOF")
          print(final)
          print("EOF")
          PY
          {
            echo "report<<EOF"
            cat report.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post PR comment
        if: steps.changes.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `${{ steps.analyze.outputs.report }}` || "No Python changes found."
            if (!context.payload.pull_request) return;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: No Python changes
        if: steps.changes.outputs.any_changed != 'true'
        run: echo "No Python changes found in this PR."

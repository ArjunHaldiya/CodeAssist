name: Analyze Python changes
id: analyze
if: steps.changes.outputs.any_changed == 'true'
env:
FILES_JSON: ${{ steps.changes.outputs.all_changed_files_json }}
FILES_TXT:  ${{ steps.changes.outputs.all_changed_files }}
run: |
echo "DEBUG all_changed_files_json:"
echo "${FILES_JSON}"
echo "DEBUG all_changed_files (newline list):"
echo "${FILES_TXT}"

python - <<'PY'
import json, os, subprocess, shlex, sys

files_json = os.environ.get("FILES_JSON", "")
files_txt  = os.environ.get("FILES_TXT", "")

# Robust parse: prefer JSON; if empty/invalid, fall back to newline text
files = []
if files_json and files_json.strip():
  try:
      files = json.loads(files_json)
  except Exception:
      pass
if not files:
  files = [f.strip() for f in files_txt.splitlines() if f.strip()]

# Keep only .py files and that exist
import os as _os
files = [f for f in files if f.endswith(".py") and _os.path.isfile(f)]

report = ["### CodeAssist Review"]
if not files:
  report.append("No Python changes found in this PR.")
else:
  for f in files:
      report.append(f"\n**{f}**")

      # --- flake8 ---
      try:
          cmd = f'flake8 --format="%(path)s:%(row)d:%(col)d %(code)s %(text)s" {shlex.quote(f)}'
          out = subprocess.run(cmd, shell=True, capture_output=True, text=True).stdout.strip()
          report.append("\n**flake8**\n```\n" + (out or "No issues.") + "\n```")
      except Exception as e:
          report.append(f"\n**flake8**\n```\nerror: {e}\n```")

      # --- bandit ---
      try:
          cmd = f'bandit -q -f json {shlex.quote(f)}'
          res = subprocess.run(cmd, shell=True, capture_output=True, text=True)
          msgs = []
          if res.stdout.strip():
              data = json.loads(res.stdout)
              for r in data.get("results", []):
                  msgs.append(f"{r.get('filename')}:{r.get('line_number')} {r.get('test_id')} {r.get('issue_text')}")
          report.append("\n**bandit**\n```\n" + ("\n".join(msgs) or "No issues.") + "\n```")
      except Exception as e:
          report.append(f"\n**bandit**\n```\nerror: {e}\n```")

      # --- radon (CC ≥ 8) ---
      try:
          from radon.complexity import cc_visit
          with open(f, "r", encoding="utf-8", errors="ignore") as fh:
              code = fh.read()
          lines=[]
          for b in cc_visit(code):
              cc = getattr(b, "complexity", 0)
              if cc >= 8:
                  name = getattr(b, "name", "<block>")
                  lineno = getattr(b, "lineno", 1)
                  lines.append(f"{f}:{lineno} CC={cc} {name}")
          report.append("\n**radon (CC ≥ 8)**\n```\n" + ("\n".join(lines) or "No functions over threshold.") + "\n```")
      except Exception as e:
          report.append(f"\n**radon**\n```\nerror: {e}\n```")

final = "\n".join(report)
# Emit to step output
print(final)
with open("report.md", "w", encoding="utf-8") as fh:
  fh.write(final)
print("report<<EOF")
print(final)
print("EOF")
PY

{
echo "report<<EOF"
cat report.md
echo "EOF"
} >> "$GITHUB_OUTPUT"
